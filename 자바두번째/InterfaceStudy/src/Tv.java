//	추상클래스이므로 구현을 강요한다
public interface Tv {

//	public static final (인터페이스에는 이게 다 자동적으로 변수앞에 붙는다) - static처럼 접근해서 사용해라
	public static final boolean POWER = false; //인스턴스변수가 아닌 Public(전역)static변수(공유변수)
//								상수 // 대문자로 적으면 상수 - 절대변화할수 없는, final(마지막) 절대 수정할수 없는
	final int CHANNEL_UP = 0;
	static int VOLUME = 0;
	String NAME = "";       //인터페이스에서는 public static final가 자동으로 붙으니, 이런 형태로 적어라
	
//	public abstract이 (인터페이스에서는 메서드앞에 자동적으로 붙는다)
	public abstract void power();
	int getVolume();
	
	
	
//	CHANNEL_UP // 대소문자 구별이 안되므로 이런식의 스칼라 표기법을 사용해준다
	
//	[ 인터페이스 interface ]
//			설계의 영역 - 정말 뼈대정도만 설계하는 것
//
//			일종의 추상클래스이다.
//			인터페이스는 추상클래스처럼 추상메서드를 갖지만 
//			추상클래스보다 추상화 정도가 높아서
//			추상클래스와 달리 몸통을 갖춘 
//			일반 메서드 or 멤버변수를 구성원으로 가질수 없다
//			오직 추상메서드와 상수만을 멤버로 가질 수 있으며,
//			그 외의 다른 어떠한 요소도 허용하지 않는다.
//
//			- 추상클래스는
//			인스턴스변수
//			메서드를
//			구현해도되고 구현하지 않아도 된다
//
//			- 인터페이스는
//			인스턴스변수
//			일반 메서드를
//			가질수 없다
//
//			일반적인 클래스의 멤버들고 다르다
//			제약사항
//			- 모든 멤버변수는 Public static final 이어야하며,
//			이를 생략할 수 있다
//			- 모든 메서드는 public abstract 이어야하며,
//			이를 생략할 수 있다
//			단, static메서드와 디폴트 메서드는 예외(jdk 1.8부터 변경)	
	
	
//	추상적							구체적
//	<-------------------------------------->
//	interface	    abstract 		class
	
//	@ interface는 implements 로 구현한다
	
//	@ interface는 implements 로 구현한다
//	@ 모델링하면 점선으로 구현됨
//	(상속을 하면 모델링시 실선으로 구현됨)
//	@ 인터페이스는 생성자가 없다
	
//	인터페이스 장점
//	- 개발시간을 단축시킬 수 있다
//	- 표준화가 가능하다(일관성을 가지게되는 -제일중요, 팀웍의 시작)
//	- 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
//	- 독립적인 프로그래밍이 가능하다 (기능의 분리도)
}
